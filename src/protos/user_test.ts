// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "user_test.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from '@protobuf-ts/runtime';
import type { IBinaryWriter } from '@protobuf-ts/runtime';
import { WireType } from '@protobuf-ts/runtime';
import type { BinaryReadOptions } from '@protobuf-ts/runtime';
import type { IBinaryReader } from '@protobuf-ts/runtime';
import { UnknownFieldHandler } from '@protobuf-ts/runtime';
import type { PartialMessage } from '@protobuf-ts/runtime';
import { reflectionMergePartial } from '@protobuf-ts/runtime';
import { MESSAGE_TYPE } from '@protobuf-ts/runtime';
import { MessageType } from '@protobuf-ts/runtime';
/**
 * @generated from protobuf message UserState
 */
export interface UserState {
  /**
   * @generated from protobuf field: string name = 1;
   */
  name: string;
  /**
   * @generated from protobuf field: string nickname = 2;
   */
  nickname: string;
}
/**
 * @generated from protobuf message ChangeUserName
 */
export interface ChangeUserName {
  /**
   * @generated from protobuf field: string new_name = 1;
   */
  newName: string;
}
/**
 * @generated from protobuf message ChangeUserNameResponse
 */
export interface ChangeUserNameResponse {
  /**
   * @generated from protobuf field: ChangeUserNameStatus status = 1;
   */
  status: ChangeUserNameStatus;
  /**
   * @generated from protobuf field: string new_name = 2;
   */
  newName: string;
}
/**
 * @generated from protobuf enum ChangeUserNameStatus
 */
export enum ChangeUserNameStatus {
  /**
   * @generated from protobuf enum value: NAME_ALREADY_TAKEN = 0;
   */
  NAME_ALREADY_TAKEN = 0,
  /**
   * @generated from protobuf enum value: OK = 1;
   */
  OK = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class UserState$Type extends MessageType<UserState> {
  constructor() {
    super('UserState', [
      { no: 1, name: 'name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'nickname', kind: 'scalar', T: 9 /*ScalarType.STRING*/ }
    ]);
  }
  create(value?: PartialMessage<UserState>): UserState {
    const message = { name: '', nickname: '' };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this
    });
    if (value !== undefined) reflectionMergePartial<UserState>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: UserState
  ): UserState {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string name */ 1:
          message.name = reader.string();
          break;
        case /* string nickname */ 2:
          message.nickname = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: UserState,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string name = 1; */
    if (message.name !== '') writer.tag(1, WireType.LengthDelimited).string(message.name);
    /* string nickname = 2; */
    if (message.nickname !== '') writer.tag(2, WireType.LengthDelimited).string(message.nickname);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message UserState
 */
export const UserState = new UserState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeUserName$Type extends MessageType<ChangeUserName> {
  constructor() {
    super('ChangeUserName', [
      { no: 1, name: 'new_name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ }
    ]);
  }
  create(value?: PartialMessage<ChangeUserName>): ChangeUserName {
    const message = { newName: '' };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this
    });
    if (value !== undefined) reflectionMergePartial<ChangeUserName>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ChangeUserName
  ): ChangeUserName {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string new_name */ 1:
          message.newName = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ChangeUserName,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string new_name = 1; */
    if (message.newName !== '') writer.tag(1, WireType.LengthDelimited).string(message.newName);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message ChangeUserName
 */
export const ChangeUserName = new ChangeUserName$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeUserNameResponse$Type extends MessageType<ChangeUserNameResponse> {
  constructor() {
    super('ChangeUserNameResponse', [
      {
        no: 1,
        name: 'status',
        kind: 'enum',
        T: () => ['ChangeUserNameStatus', ChangeUserNameStatus]
      },
      { no: 2, name: 'new_name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ }
    ]);
  }
  create(value?: PartialMessage<ChangeUserNameResponse>): ChangeUserNameResponse {
    const message = { status: 0, newName: '' };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this
    });
    if (value !== undefined) reflectionMergePartial<ChangeUserNameResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ChangeUserNameResponse
  ): ChangeUserNameResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* ChangeUserNameStatus status */ 1:
          message.status = reader.int32();
          break;
        case /* string new_name */ 2:
          message.newName = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ChangeUserNameResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* ChangeUserNameStatus status = 1; */
    if (message.status !== 0) writer.tag(1, WireType.Varint).int32(message.status);
    /* string new_name = 2; */
    if (message.newName !== '') writer.tag(2, WireType.LengthDelimited).string(message.newName);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message ChangeUserNameResponse
 */
export const ChangeUserNameResponse = new ChangeUserNameResponse$Type();
