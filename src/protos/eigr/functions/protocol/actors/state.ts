// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "state.proto" (package "eigr.functions.protocol.state", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from '@protobuf-ts/runtime'
import type { IBinaryWriter } from '@protobuf-ts/runtime'
import { WireType } from '@protobuf-ts/runtime'
import type { BinaryReadOptions } from '@protobuf-ts/runtime'
import type { IBinaryReader } from '@protobuf-ts/runtime'
import { UnknownFieldHandler } from '@protobuf-ts/runtime'
import type { PartialMessage } from '@protobuf-ts/runtime'
import { reflectionMergePartial } from '@protobuf-ts/runtime'
import { MESSAGE_TYPE } from '@protobuf-ts/runtime'
import { MessageType } from '@protobuf-ts/runtime'
import { ActorState } from './actor'
/**
 * A revision is just a version number for a record in the snapshot table that stores the actors' state.
 * When an actor has its snaphost timeout, it increments its internal revision number and saves it along with its internal data.
 * Some of the persistence adapters can use this revision number to find the state of an Actor at a given point in time.
 * As Actors in Spawn persist their internal data as snapshots from time to time a revision number may not indicate the state of a given change
 * but will most likely point to the exact time that a given actor's internal state was persisted into the database.
 *
 * @generated from protobuf message eigr.functions.protocol.state.Revision
 */
export interface Revision {
  /**
   * @generated from protobuf field: int64 value = 1;
   */
  value: bigint
}
/**
 * A checkpoint encapsulates a revision and the state it represents.
 *
 * @generated from protobuf message eigr.functions.protocol.state.Checkpoint
 */
export interface Checkpoint {
  /**
   * @generated from protobuf field: eigr.functions.protocol.state.Revision revision = 1;
   */
  revision?: Revision
  /**
   * @generated from protobuf field: eigr.functions.protocol.actors.ActorState state = 2;
   */
  state?: ActorState
}
// @generated message type with reflection information, may provide speed optimized methods
class Revision$Type extends MessageType<Revision> {
  constructor() {
    super('eigr.functions.protocol.state.Revision', [
      { no: 1, name: 'value', kind: 'scalar', T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
    ])
  }
  create(value?: PartialMessage<Revision>): Revision {
    const message = { value: 0n }
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this })
    if (value !== undefined) reflectionMergePartial<Revision>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: Revision
  ): Revision {
    let message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* int64 value */ 1:
          message.value = reader.int64().toBigInt()
          break
        default:
          let u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            )
          let d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: Revision,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* int64 value = 1; */
    if (message.value !== 0n) writer.tag(1, WireType.Varint).int64(message.value)
    let u = options.writeUnknownFields
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer)
    return writer
  }
}
/**
 * @generated MessageType for protobuf message eigr.functions.protocol.state.Revision
 */
export const Revision = new Revision$Type()
// @generated message type with reflection information, may provide speed optimized methods
class Checkpoint$Type extends MessageType<Checkpoint> {
  constructor() {
    super('eigr.functions.protocol.state.Checkpoint', [
      { no: 1, name: 'revision', kind: 'message', T: () => Revision },
      { no: 2, name: 'state', kind: 'message', T: () => ActorState }
    ])
  }
  create(value?: PartialMessage<Checkpoint>): Checkpoint {
    const message = {}
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this })
    if (value !== undefined) reflectionMergePartial<Checkpoint>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: Checkpoint
  ): Checkpoint {
    let message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* eigr.functions.protocol.state.Revision revision */ 1:
          message.revision = Revision.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.revision
          )
          break
        case /* eigr.functions.protocol.actors.ActorState state */ 2:
          message.state = ActorState.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.state
          )
          break
        default:
          let u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            )
          let d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: Checkpoint,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* eigr.functions.protocol.state.Revision revision = 1; */
    if (message.revision)
      Revision.internalBinaryWrite(
        message.revision,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join()
    /* eigr.functions.protocol.actors.ActorState state = 2; */
    if (message.state)
      ActorState.internalBinaryWrite(
        message.state,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options
      ).join()
    let u = options.writeUnknownFields
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer)
    return writer
  }
}
/**
 * @generated MessageType for protobuf message eigr.functions.protocol.state.Checkpoint
 */
export const Checkpoint = new Checkpoint$Type()
