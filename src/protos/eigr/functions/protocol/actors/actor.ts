// @generated by protobuf-ts 2.7.0
// @generated from protobuf file "eigr/functions/protocol/actors/actor.proto" (package "eigr.functions.protocol.actors", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Any } from "../../../../google/protobuf/any";
/**
 * A strategy for save state.
 *
 * @generated from protobuf message eigr.functions.protocol.actors.Registry
 */
export interface Registry {
    /**
     * @generated from protobuf field: map<string, eigr.functions.protocol.actors.Actor> actors = 1;
     */
    actors: {
        [key: string]: Actor;
    };
}
/**
 * @generated from protobuf message eigr.functions.protocol.actors.ActorSystem
 */
export interface ActorSystem {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: eigr.functions.protocol.actors.Registry registry = 2;
     */
    registry?: Registry;
}
/**
 * A strategy for save state.
 *
 * @generated from protobuf message eigr.functions.protocol.actors.ActorSnapshotStrategy
 */
export interface ActorSnapshotStrategy {
    /**
     * @generated from protobuf oneof: strategy
     */
    strategy: {
        oneofKind: "timeout";
        /**
         * the timeout strategy.
         *
         * @generated from protobuf field: eigr.functions.protocol.actors.TimeoutStrategy timeout = 1;
         */
        timeout: TimeoutStrategy;
    } | {
        oneofKind: undefined;
    };
}
/**
 * A strategy which a user function's entity is passivated.
 *
 * @generated from protobuf message eigr.functions.protocol.actors.ActorDeactivateStrategy
 */
export interface ActorDeactivateStrategy {
    /**
     * @generated from protobuf oneof: strategy
     */
    strategy: {
        oneofKind: "timeout";
        /**
         * the timeout strategy.
         *
         * @generated from protobuf field: eigr.functions.protocol.actors.TimeoutStrategy timeout = 1;
         */
        timeout: TimeoutStrategy;
    } | {
        oneofKind: undefined;
    };
}
/**
 * A strategy based on a timeout.
 *
 * @generated from protobuf message eigr.functions.protocol.actors.TimeoutStrategy
 */
export interface TimeoutStrategy {
    /**
     * The timeout in millis
     *
     * @generated from protobuf field: int64 timeout = 1;
     */
    timeout: bigint;
}
/**
 * @generated from protobuf message eigr.functions.protocol.actors.ActorState
 */
export interface ActorState {
    /**
     * @generated from protobuf field: map<string, string> tags = 1;
     */
    tags: {
        [key: string]: string;
    };
    /**
     * @generated from protobuf field: google.protobuf.Any state = 2;
     */
    state?: Any;
}
/**
 * @generated from protobuf message eigr.functions.protocol.actors.Actor
 */
export interface Actor {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: bool persistent = 2;
     */
    persistent: boolean;
    /**
     * @generated from protobuf field: eigr.functions.protocol.actors.ActorState state = 3;
     */
    state?: ActorState;
    /**
     * @generated from protobuf field: eigr.functions.protocol.actors.ActorSnapshotStrategy snapshot_strategy = 4;
     */
    snapshotStrategy?: ActorSnapshotStrategy;
    /**
     * @generated from protobuf field: eigr.functions.protocol.actors.ActorDeactivateStrategy deactivate_strategy = 5;
     */
    deactivateStrategy?: ActorDeactivateStrategy;
}
// @generated message type with reflection information, may provide speed optimized methods
class Registry$Type extends MessageType<Registry> {
    constructor() {
        super("eigr.functions.protocol.actors.Registry", [
            { no: 1, name: "actors", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Actor } }
        ]);
    }
    create(value?: PartialMessage<Registry>): Registry {
        const message = { actors: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Registry>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Registry): Registry {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, eigr.functions.protocol.actors.Actor> actors */ 1:
                    this.binaryReadMap1(message.actors, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: Registry["actors"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof Registry["actors"] | undefined, val: Registry["actors"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Actor.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field eigr.functions.protocol.actors.Registry.actors");
            }
        }
        map[key ?? ""] = val ?? Actor.create();
    }
    internalBinaryWrite(message: Registry, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, eigr.functions.protocol.actors.Actor> actors = 1; */
        for (let k of Object.keys(message.actors)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Actor.internalBinaryWrite(message.actors[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message eigr.functions.protocol.actors.Registry
 */
export const Registry = new Registry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActorSystem$Type extends MessageType<ActorSystem> {
    constructor() {
        super("eigr.functions.protocol.actors.ActorSystem", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "registry", kind: "message", T: () => Registry }
        ]);
    }
    create(value?: PartialMessage<ActorSystem>): ActorSystem {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActorSystem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActorSystem): ActorSystem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* eigr.functions.protocol.actors.Registry registry */ 2:
                    message.registry = Registry.internalBinaryRead(reader, reader.uint32(), options, message.registry);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActorSystem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* eigr.functions.protocol.actors.Registry registry = 2; */
        if (message.registry)
            Registry.internalBinaryWrite(message.registry, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message eigr.functions.protocol.actors.ActorSystem
 */
export const ActorSystem = new ActorSystem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActorSnapshotStrategy$Type extends MessageType<ActorSnapshotStrategy> {
    constructor() {
        super("eigr.functions.protocol.actors.ActorSnapshotStrategy", [
            { no: 1, name: "timeout", kind: "message", oneof: "strategy", T: () => TimeoutStrategy }
        ]);
    }
    create(value?: PartialMessage<ActorSnapshotStrategy>): ActorSnapshotStrategy {
        const message = { strategy: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActorSnapshotStrategy>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActorSnapshotStrategy): ActorSnapshotStrategy {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* eigr.functions.protocol.actors.TimeoutStrategy timeout */ 1:
                    message.strategy = {
                        oneofKind: "timeout",
                        timeout: TimeoutStrategy.internalBinaryRead(reader, reader.uint32(), options, (message.strategy as any).timeout)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActorSnapshotStrategy, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* eigr.functions.protocol.actors.TimeoutStrategy timeout = 1; */
        if (message.strategy.oneofKind === "timeout")
            TimeoutStrategy.internalBinaryWrite(message.strategy.timeout, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message eigr.functions.protocol.actors.ActorSnapshotStrategy
 */
export const ActorSnapshotStrategy = new ActorSnapshotStrategy$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActorDeactivateStrategy$Type extends MessageType<ActorDeactivateStrategy> {
    constructor() {
        super("eigr.functions.protocol.actors.ActorDeactivateStrategy", [
            { no: 1, name: "timeout", kind: "message", oneof: "strategy", T: () => TimeoutStrategy }
        ]);
    }
    create(value?: PartialMessage<ActorDeactivateStrategy>): ActorDeactivateStrategy {
        const message = { strategy: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActorDeactivateStrategy>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActorDeactivateStrategy): ActorDeactivateStrategy {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* eigr.functions.protocol.actors.TimeoutStrategy timeout */ 1:
                    message.strategy = {
                        oneofKind: "timeout",
                        timeout: TimeoutStrategy.internalBinaryRead(reader, reader.uint32(), options, (message.strategy as any).timeout)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActorDeactivateStrategy, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* eigr.functions.protocol.actors.TimeoutStrategy timeout = 1; */
        if (message.strategy.oneofKind === "timeout")
            TimeoutStrategy.internalBinaryWrite(message.strategy.timeout, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message eigr.functions.protocol.actors.ActorDeactivateStrategy
 */
export const ActorDeactivateStrategy = new ActorDeactivateStrategy$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TimeoutStrategy$Type extends MessageType<TimeoutStrategy> {
    constructor() {
        super("eigr.functions.protocol.actors.TimeoutStrategy", [
            { no: 1, name: "timeout", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<TimeoutStrategy>): TimeoutStrategy {
        const message = { timeout: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TimeoutStrategy>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TimeoutStrategy): TimeoutStrategy {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 timeout */ 1:
                    message.timeout = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TimeoutStrategy, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 timeout = 1; */
        if (message.timeout !== 0n)
            writer.tag(1, WireType.Varint).int64(message.timeout);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message eigr.functions.protocol.actors.TimeoutStrategy
 */
export const TimeoutStrategy = new TimeoutStrategy$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActorState$Type extends MessageType<ActorState> {
    constructor() {
        super("eigr.functions.protocol.actors.ActorState", [
            { no: 1, name: "tags", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 2, name: "state", kind: "message", T: () => Any }
        ]);
    }
    create(value?: PartialMessage<ActorState>): ActorState {
        const message = { tags: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActorState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActorState): ActorState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, string> tags */ 1:
                    this.binaryReadMap1(message.tags, reader, options);
                    break;
                case /* google.protobuf.Any state */ 2:
                    message.state = Any.internalBinaryRead(reader, reader.uint32(), options, message.state);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: ActorState["tags"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ActorState["tags"] | undefined, val: ActorState["tags"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field eigr.functions.protocol.actors.ActorState.tags");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: ActorState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, string> tags = 1; */
        for (let k of Object.keys(message.tags))
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.tags[k]).join();
        /* google.protobuf.Any state = 2; */
        if (message.state)
            Any.internalBinaryWrite(message.state, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message eigr.functions.protocol.actors.ActorState
 */
export const ActorState = new ActorState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Actor$Type extends MessageType<Actor> {
    constructor() {
        super("eigr.functions.protocol.actors.Actor", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "persistent", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "state", kind: "message", T: () => ActorState },
            { no: 4, name: "snapshot_strategy", kind: "message", T: () => ActorSnapshotStrategy },
            { no: 5, name: "deactivate_strategy", kind: "message", T: () => ActorDeactivateStrategy }
        ]);
    }
    create(value?: PartialMessage<Actor>): Actor {
        const message = { name: "", persistent: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Actor>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Actor): Actor {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* bool persistent */ 2:
                    message.persistent = reader.bool();
                    break;
                case /* eigr.functions.protocol.actors.ActorState state */ 3:
                    message.state = ActorState.internalBinaryRead(reader, reader.uint32(), options, message.state);
                    break;
                case /* eigr.functions.protocol.actors.ActorSnapshotStrategy snapshot_strategy */ 4:
                    message.snapshotStrategy = ActorSnapshotStrategy.internalBinaryRead(reader, reader.uint32(), options, message.snapshotStrategy);
                    break;
                case /* eigr.functions.protocol.actors.ActorDeactivateStrategy deactivate_strategy */ 5:
                    message.deactivateStrategy = ActorDeactivateStrategy.internalBinaryRead(reader, reader.uint32(), options, message.deactivateStrategy);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Actor, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* bool persistent = 2; */
        if (message.persistent !== false)
            writer.tag(2, WireType.Varint).bool(message.persistent);
        /* eigr.functions.protocol.actors.ActorState state = 3; */
        if (message.state)
            ActorState.internalBinaryWrite(message.state, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* eigr.functions.protocol.actors.ActorSnapshotStrategy snapshot_strategy = 4; */
        if (message.snapshotStrategy)
            ActorSnapshotStrategy.internalBinaryWrite(message.snapshotStrategy, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* eigr.functions.protocol.actors.ActorDeactivateStrategy deactivate_strategy = 5; */
        if (message.deactivateStrategy)
            ActorDeactivateStrategy.internalBinaryWrite(message.deactivateStrategy, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message eigr.functions.protocol.actors.Actor
 */
export const Actor = new Actor$Type();
